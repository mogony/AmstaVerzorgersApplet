package views;

import connectivity.QueryManager;
import java.awt.Font;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import ldgraph.LDGraph;
import models.Patient;


/**
 * This form retrieves a list of patients and shows them in a table.
 * @author Jelle Mogony, AMS04
 */
public class PatientOverview extends javax.swing.JFrame {
    private DefaultTableModel patientTableModel;
    
    /**
     * Creates new form PatientOverview
     */
    public PatientOverview() {
        initComponents();
        this.setTitle(ldgraph.Session.storedUserName + " - Bewoners overzicht");
        updateTable(); //Staat ongeveer 20x in dit document; zorgt
                       //ervoor dat na elke handeling de lijst
                       //zelfstandig gerefresht wordt
    }
    
    /**
     * This method retrieves a list of all patients and sets up a table containing
     * all retrieved data.
     */
    private void updateTable() {
        System.out.println("Setting up patients overview...");
        patientTableModel = (DefaultTableModel) this.patientTable.getModel();
        LinkedList<Patient> patients = QueryManager.getPatientList();
        patientTableModel.setRowCount(0);
        for(Patient patient : patients) {
            patientTableModel.addRow(new Object[]{
                patient.getPatientId(),
                patient.getName(),
                patient.getRoom(),
                patient.getDob(),
                patient.getComments()});
                updateRowHeights();
//            this.patientTable.setRowHeight(x);
        }
        System.out.println("Done setting up patients overview.");
    }
    
    private void updateRowHeights()
{
    try
    {
        patientTable.getTableHeader().setFont(new Font("SansSerif", Font.ITALIC, 20));
        for (int row = 0; row < patientTable.getRowCount(); row++)
        {
            int rowHeight = patientTable.getRowHeight();

            for (int column = 0; column < patientTable.getColumnCount(); column++)
            {
                
                rowHeight = 30;
            }

            patientTable.setRowHeight(row, rowHeight);
        }
    }
    catch(ClassCastException e) {}
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jbDelete = new javax.swing.JButton();
        jbAdd = new javax.swing.JButton();
        jlError = new javax.swing.JLabel();
        jbEdit = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        patientTable.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Bewoner", "Kamer", "Geboortedatum", "Opmerkingen"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patientTable);
        if (patientTable.getColumnModel().getColumnCount() > 0) {
            patientTable.getColumnModel().getColumn(0).setMaxWidth(36);
            patientTable.getColumnModel().getColumn(1).setMinWidth(160);
            patientTable.getColumnModel().getColumn(2).setMaxWidth(75);
            patientTable.getColumnModel().getColumn(3).setMinWidth(100);
            patientTable.getColumnModel().getColumn(4).setMinWidth(200);
        }

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setText("Laat resultaten zien");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jbDelete.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbDelete.setText("Verwijder");
        jbDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeleteActionPerformed(evt);
            }
        });

        jbAdd.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbAdd.setText("Voeg toe");
        jbAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddActionPerformed(evt);
            }
        });

        jbEdit.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbEdit.setText("Pas aan");
        jbEdit.setIconTextGap(5);
        jbEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton2.setText("Compare");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 944, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlError)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbDelete)
                    .addComponent(jbAdd)
                    .addComponent(jbEdit)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int selectedRow = patientTable.getSelectedRow();
        if(selectedRow >= 0) 
        {
            ldgraph.Session.storedPatientId = 
                    (int) patientTable.getValueAt(selectedRow, 0);
            ldgraph.Session.storedPatientName = 
                    (String) patientTable.getValueAt(selectedRow, 1);
            this.setVisible(false);
            ldgraph.LDGraph.showPatientGraph();
            updateTable();
        } else 
        {
            System.out.println("No row selected!");
            jlError.setText("U moet eerst een regel selecteren!");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jbDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeleteActionPerformed
        int selectedRow = patientTable.getSelectedRow();
        if(selectedRow >= 0) 
        {
            ldgraph.Session.storedPatientId = 
                    (int) patientTable.getValueAt(selectedRow, 0);
            ldgraph.Session.storedPatientName = 
                    (String) patientTable.getValueAt(selectedRow, 1);
//            String patientName = qm.getPatient(ldgraph.Session.storedPatientId);
            int delYN = JOptionPane.showConfirmDialog(null, 
                    "Weet u zeker dat u " + ldgraph.Session.storedPatientName + " wilt verwijderen?", "test", 1);
            if(delYN == 0) QueryManager.deletePatient(ldgraph.Session.storedPatientId);
            updateTable();
        } else 
        {
            System.out.println("No row selected!");
            jlError.setText("U moet eerst een regel selecteren!");
            updateTable();
        }
    }//GEN-LAST:event_jbDeleteActionPerformed

    private void jbAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddActionPerformed
        String in, ik, ig, io;
        in = JOptionPane.showInputDialog(null,"Naam nieuwe bewoner?", JOptionPane.QUESTION_MESSAGE);
        ik = JOptionPane.showInputDialog(null,"Kamer nieuwe bewoner?", JOptionPane.QUESTION_MESSAGE);
        ig = JOptionPane.showInputDialog(null,"Geboortedatum? (yyyy-mm-dd)", JOptionPane.QUESTION_MESSAGE);
        io = JOptionPane.showInputDialog(null,"Opmerkingen?", JOptionPane.QUESTION_MESSAGE);
        QueryManager.addPatient(in, ik, ig, io);
        updateTable();
    }//GEN-LAST:event_jbAddActionPerformed

    private void jbEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditActionPerformed
        int selectedRow = patientTable.getSelectedRow();
        int selectedCol = patientTable.getSelectedColumn();
        if(selectedCol == 1) { //name change
            String newVal = JOptionPane.showInputDialog(null, 
                    "Wat moet de nieuwe naam zijn?", JOptionPane.QUESTION_MESSAGE);
            QueryManager.editPatient((int) patientTable.getValueAt(selectedRow, 0), Patient.NAME, newVal);
            updateTable();
        } else if(selectedCol == 2) { //room
            String newVal = JOptionPane.showInputDialog(null, 
                    "Wat is de nieuwe kamer?", JOptionPane.QUESTION_MESSAGE);
            QueryManager.editPatient((int) patientTable.getValueAt(selectedRow, 0), Patient.ROOM, newVal);
            updateTable();
        } else if(selectedCol == 3)  { //date of birth
            String newVal = JOptionPane.showInputDialog(null, 
                    "Wat is de juiste geboorte datum?", JOptionPane.QUESTION_MESSAGE);
            QueryManager.editPatient((int) patientTable.getValueAt(selectedRow, 0), Patient.DOB, newVal);
            updateTable();
        } else if(selectedCol == 4)  { //comments
            String newVal = JOptionPane.showInputDialog(null, 
                    "Opmerking:", JOptionPane.QUESTION_MESSAGE);
            QueryManager.editPatient((int) patientTable.getValueAt(selectedRow, 0), Patient.COMMENTS, newVal);
            updateTable();
        }
        else if(selectedCol == 0) {
            jlError.setText("U kunt ID's niet veranderen!");
        }
    }//GEN-LAST:event_jbEditActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int selectedRow = patientTable.getSelectedRow();
        if(selectedRow >= 0) 
        {
            ldgraph.Session.storedPatientId = 
                    (int) patientTable.getValueAt(selectedRow, 0);
            ldgraph.Session.storedPatientName = 
                     (String) patientTable.getValueAt(selectedRow, 1);
            this.setVisible(false);
            LDGraph.showPatientCompare();
            
        } else 
        {
            System.out.println("No row selected!");
            jlError.setText("U moet eerst een regel selecteren!");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAdd;
    private javax.swing.JButton jbDelete;
    private javax.swing.JButton jbEdit;
    private javax.swing.JLabel jlError;
    private javax.swing.JTable patientTable;
    // End of variables declaration//GEN-END:variables
}